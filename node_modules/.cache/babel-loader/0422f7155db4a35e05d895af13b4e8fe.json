{"ast":null,"code":"var _jsxFileName = \"/Users/chrisbrown/Desktop/react-covid-19/React-Covid-Tracker/src/ChartGraph.js\";\n// import React from 'react';\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2'; // Think about putting the object in the return and using hooks\n// to update the particular data we want to update\n\nconst ChartGraph = props => {\n  const dataApi = props.resp; // const [posChartData, setPosDataChart] = useState({});\n  // const [dataTr, setDataTr] = useState({});\n\n  const randomVal = [23, 45, 67, 12, 45, 56];\n  const posChartFilter = dataApi.filter((pst, idx) => {\n    if (idx % 20 === 0) {\n      return pst.positive;\n    }\n  });\n  const posChartData = posChartFilter.map(filt => {\n    return filt.positive;\n  });\n  console.log(posChartData);\n  const chartData = {\n    labels: ['label 1', 'label 2', 'label 3', 'label 4',, 'label 4', 'label 4', 'label 4', 'label 4', 'label 4', 'label 4'],\n    datasets: [{\n      label: 'test label',\n      data: posChartData,\n      backgroundColor: ['rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)', 'rgba(255, 206, 86, 0.6)', 'rgba(75, 192, 192, 0.6)'],\n      borderWidth: 3\n    }]\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \" testing Charts\"), /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ChartGraph;","map":{"version":3,"sources":["/Users/chrisbrown/Desktop/react-covid-19/React-Covid-Tracker/src/ChartGraph.js"],"names":["React","useState","useEffect","Line","ChartGraph","props","dataApi","resp","randomVal","posChartFilter","filter","pst","idx","positive","posChartData","map","filt","console","log","chartData","labels","datasets","label","data","backgroundColor","borderWidth"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,iBAArB,C,CAEA;AACA;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAC1B,QAAMC,OAAO,GAAGD,KAAK,CAACE,IAAtB,CAD0B,CAE1B;AACA;;AAEA,QAAMC,SAAS,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,CAAlB;AAEA,QAAMC,cAAc,GAAGH,OAAO,CAACI,MAAR,CAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AAClD,QAAIA,GAAG,GAAG,EAAN,KAAa,CAAjB,EAAoB;AAClB,aAAOD,GAAG,CAACE,QAAX;AACD;AACF,GAJsB,CAAvB;AAMA,QAAMC,YAAY,GAAGL,cAAc,CAACM,GAAf,CAAmBC,IAAI,IAAI;AAC9C,WAAOA,IAAI,CAACH,QAAZ;AACD,GAFoB,CAArB;AAIAI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AAEA,QAAMK,SAAS,GAAG;AAChBC,IAAAA,MAAM,EAAE,CACN,SADM,EAEN,SAFM,EAGN,SAHM,EAIN,SAJM,GAMN,SANM,EAON,SAPM,EAQN,SARM,EASN,SATM,EAUN,SAVM,EAWN,SAXM,CADQ;AAchBC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,YADT;AAEEC,MAAAA,IAAI,EAAET,YAFR;AAGEU,MAAAA,eAAe,EAAE,CACf,yBADe,EAEf,yBAFe,EAGf,yBAHe,EAIf,yBAJe,CAHnB;AASEC,MAAAA,WAAW,EAAE;AATf,KADQ;AAdM,GAAlB;AA6BA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,eAEE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEN,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAOD,CAvDD;;AAyDA,eAAef,UAAf","sourcesContent":["// import React from 'react';\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\n\n// Think about putting the object in the return and using hooks\n// to update the particular data we want to update\n\nconst ChartGraph = props => {\n  const dataApi = props.resp;\n  // const [posChartData, setPosDataChart] = useState({});\n  // const [dataTr, setDataTr] = useState({});\n\n  const randomVal = [23, 45, 67, 12, 45, 56];\n\n  const posChartFilter = dataApi.filter((pst, idx) => {\n    if (idx % 20 === 0) {\n      return pst.positive;\n    }\n  });\n\n  const posChartData = posChartFilter.map(filt => {\n    return filt.positive;\n  });\n\n  console.log(posChartData);\n\n  const chartData = {\n    labels: [\n      'label 1',\n      'label 2',\n      'label 3',\n      'label 4',\n      ,\n      'label 4',\n      'label 4',\n      'label 4',\n      'label 4',\n      'label 4',\n      'label 4'\n    ],\n    datasets: [\n      {\n        label: 'test label',\n        data: posChartData,\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.6)',\n          'rgba(54, 162, 235, 0.6)',\n          'rgba(255, 206, 86, 0.6)',\n          'rgba(75, 192, 192, 0.6)'\n        ],\n        borderWidth: 3\n      }\n    ]\n  };\n\n  return (\n    <div>\n      <h1> testing Charts</h1>\n      <Line data={chartData} />\n      {/* <Line /> */}\n    </div>\n  );\n};\n\nexport default ChartGraph;\n"]},"metadata":{},"sourceType":"module"}